## Learning basic sorting algorithims

# https://realpython.com/sorting-algorithms-python/

from random import randint  # getting random integers
from timeit import repeat   # getting actual time it takes to run sorting algorithims

# 100 numbers, duplicates allowed, unsorted. https://numbergenerator.org/
array1 = [98,20,79,4,50,78,52,89,60,14,9,34,4,12,21,55,54,85,69,31,24,
          34,91,81,30,70,49,20,20,9,41,58,47,18,76,43,71,94,13,83,63,18,
          97,74,63,23,98,26,19,56,86,74,46,3,94,57,96,99,66,32,58,97,2,67,
          22,78,65,31,24,91,45,11,78,26,59,72,92,19,97,59,59,47,30,34,80,
          4,98,65,67,13,94,40,9,90,99,30,8,95,93,29,18,47,98,27,78,97,1,23,
          39,1,80,38,87,92,37,87,25,84,80,62,99,85,31,23,30,81,4,90,85,2,89,
          42,32,62,1,52,93,2,53,80,52,93,18,96,69,92,26,57,77,87,60,71,35,93,65,
          91,79,73,9,98,70,40,95,52,14,26,18,37,93,49,62,85,79,19,25,20,85,96,62,
          98,65,33,43,81,17,66,35,65,41,3,12,40,74,7,89,68,59,17,2,25,59,79,36,
          98,61,82,98,60,73,87,41,46,89,36,57,87,53,29,21,29,89,8,64,41,44,72,
          86,23,70,85,11,93,2,4,70,94,93,51,20,29,100,82,30,49,45,22,19,69,21,81,
          61,12,13,81,82,4,73,27,96,10,47,53,11,82,95,21,20,52,27,66,36,43,100,89,
          96,36,46,43,95,74,36,49,20,77,21,52,5,42,97,15,20,67,87,39,36,61,32,57,49,
          76,83,29,35,29,64,86,3,1,15,98,8,82,72,81,15,85,14,41,48,69,22,99,36,72,
          61,8,10,8,97,26,13,20,77,18,41,30,38,12,56,74,3,45,1,71,76,88,62,86,27,95,
          21,33,33,13,97,91,12,52,41,59,80,86,95,66,56,68,92,3,45,8,24,16,36,35,18,36,
          26,20,76,2,10,87,25,78,60,76,82,96,48,37,55,11,78,45,87,1,61,70,93,79,99,95,72,
          96,65,37,6,26,9,32,95,5,98,79,95,46,89,65,38,80,70,50,70,27,91,91,29,25,100,75,
          3,68,12,92,12,22,4,56,56,49,19,11,32,55,8,63,19,86,58,15,84,68,89,40,46,50,
          4,31,34,3,44,96,65,98,21,39,29,99,91,12,77,28,58,12,97,4,37,18,10,93,100,75,4,
          61,40,32,72,52,16,47,40,6,70,93,10,71,83,36,54,50,7,38,36,62,18,99,54,39,46,48,
          8,82,28,26,25,93,55,11,61,39,86,96,50,10,92,11,94,24,19,56,21,55,89,76,4,69,53,
          40,56,34,37,74,84,25,59,19,39,49,62,38,11,100,19,78,34,53,76,56,85,33,61,14,9,92,
          58,72,34,97,32,47,46,34,67,40,33,4,60,24,45,76,64,94,44,41,29,70,50,36,97,38,10,42,
          48,91,95,8,26,29,53,75,45,81,73,95,14,97,98,1,10,71,17,83,28,45,21,73,46,64,41,35,60,
          65,58,9,89,51,82,66,100,5,21,14,36,28,85,82,3,59,18,88,33,95,73,46,71,99,14,25,85,98,
          10,76,93,6,72,65,14,92,95,8,80,23,63,69,9,96,95,2,65,64,43,77,98,32,32,1,44,97,56,10,19,
          21,72,50,13,32,84,45,80,45,13,62,72,52,51,86,89,76,53,18,94,34,80,37,32,85,7,56,42,82,4,
          98,75,69,59,92,50,75,26,69,11,19,63,38,28,93,38,18,30,97,26,95,12,60,92,81,25,49,21,
          21,44,91,33,60,57,38,23,43,74,80,65,92,51,13,85,82,87,69,28,90,56,21,94,74,23,72,43,7,
          19,84,38,63,42,89,11,65,67,6,26,87,75,6,80,30,20,24,50,66,15,91,65,71,49,13,52,25,38,75,95,
          83,68,25,12,13,16,52,44,91,18,68,14,71,9,58,97,92,18,100,55,77,78,16,3,88,68,97,8,4,5,83,
          76,9,47,55,98,52,53,29,53,88,52,14,31,90,7,76,81,71,18,62,77,66,32,55,36,49,32,18,22,28,
          84,41,77,14,94,57,65,31,31,35,63,5,35,12,95,30,68,5,48,21,20,87,81,71,54,32,81,71,17,26,
          72,68,42,7,87,30,62,95,43,44,60,23,34,92,39,85,18,13,50,78,3,25,97,69,20,1,41,41,38,35,
          12,95,91,36,42,62,37,58,99,40,62,53,66,41,68,48,75,39,78,23,26,98,89,83,89,54,96,99,51,
          51,19,15,38,14,81,63,19,45,66,79,52,71,28,49,12,19,45,25,67,44,26,36,55,87,81,18,82,82,81,
          61,29,20,18,77,38,98,21,79,85,40,59,95,66,18,90,41,5,36,42,64]

#print (sorted(array1)) # python auto sort. small to big

def run_sorting_algorithm(algorithm, array):

    # Set up the context and prepare the call to the specified
    # algorithm using the supplied array. Only import the
    # algorithm function if it's not the built-in `sorted()`.
    setup_code = f"from __main__ import {algorithm}" \
        if algorithm != "sorted" else ""
    stmt = f"{algorithm}({array})"

    # Execute the code ten different times and return the time
    # in seconds that each execution took
    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)

    # Finally, display the name of the algorithm and the
    # minimum time it took to run
    print(f"Algorithm: {algorithm}. Minimum execution time: {min(times)}")

array_length = 10000

if __name__ == "__main__":
    array = [randint(0, 1000) for i in range(array_length)]
    
    run_sorting_algorithm(algorithm="sorted", array=array)

